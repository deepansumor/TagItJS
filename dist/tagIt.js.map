{"version":3,"file":"tagIt.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,wCAAwC;AACnD,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS;AACtC,8BAA8B,UAAU;AACxC,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,aAAa;AAC1B;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,aAAa;AAC1B;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,kBAAkB;AAC7B,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,kBAAkB;AAC/B;AACO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;UCtKA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACuF;AACxE;AACf;AACA;AACA,eAAe,aAAa;AAC5B,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,sBAAsB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,2DAAmB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gEAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qDAAa;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,oBAAoB,0BAA0B;AAC9C,qBAAqB,kBAAkB;AACvC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc,EAAE,YAAY,EAAE,KAAK,EAAE,WAAW;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://TagIt/./src/utils.ts","webpack://TagIt/webpack/bootstrap","webpack://TagIt/webpack/runtime/define property getters","webpack://TagIt/webpack/runtime/hasOwnProperty shorthand","webpack://TagIt/webpack/runtime/make namespace object","webpack://TagIt/./src/tagIt.ts"],"sourcesContent":["/**\r\n * TagItJS Utilities\r\n *\r\n * Provides helper functions for calculating caret coordinates,\r\n * CSS numeric values, line height, and suggestion scoring & sorting.\r\n *\r\n * @author\r\n * Deepansu Mor\r\n * @github https://github.com/deepansumor\r\n */\r\n/**\r\n * Gets caret coordinates for a textarea or input element.\r\n * Uses a hidden mirror div with fixed positioning to measure the caret.\r\n * @param {HTMLTextAreaElement | HTMLInputElement} el - The target element.\r\n * @returns {Coordinates} The top and left coordinates of the caret.\r\n */\r\nfunction getCaretCoordinatesTextarea(el) {\r\n    // Get the textarea's bounding rectangle (viewport coordinates)\r\n    const rect = el.getBoundingClientRect();\r\n    // Create or reuse the mirror div\r\n    let mirrorDiv = document.getElementById(\"textarea-caret-mirror\");\r\n    if (!mirrorDiv) {\r\n        mirrorDiv = document.createElement('div');\r\n        mirrorDiv.id = \"textarea-caret-mirror\";\r\n        document.body.appendChild(mirrorDiv);\r\n    }\r\n    // Position the mirror div exactly over the textarea using fixed positioning\r\n    mirrorDiv.style.position = \"fixed\";\r\n    mirrorDiv.style.top = `${rect.top}px`;\r\n    mirrorDiv.style.left = `${rect.left}px`;\r\n    mirrorDiv.style.width = `${rect.width}px`;\r\n    // Ensure mirror div remains hidden but rendered\r\n    mirrorDiv.style.visibility = \"hidden\";\r\n    mirrorDiv.style.whiteSpace = \"pre-wrap\";\r\n    mirrorDiv.style.wordWrap = \"break-word\";\r\n    // Copy essential styles from the textarea to the mirror div\r\n    const style = window.getComputedStyle(el);\r\n    mirrorDiv.style.font = style.font;\r\n    mirrorDiv.style.padding = style.padding;\r\n    mirrorDiv.style.border = style.border;\r\n    mirrorDiv.style.lineHeight = style.lineHeight;\r\n    // Set the mirror div's content to the textarea's value up to the caret position\r\n    const value = el.value;\r\n    const caretPos = el.selectionStart || 0;\r\n    const beforeCaret = value.substring(0, caretPos);\r\n    mirrorDiv.textContent = beforeCaret.replace(/\\n$/, \"\\n\\u200b\");\r\n    // Append a marker element to get the caret position\r\n    const marker = document.createElement(\"span\");\r\n    marker.textContent = \"\\u200b\";\r\n    mirrorDiv.appendChild(marker);\r\n    // Retrieve marker's coordinates using fixed positioning (viewport coordinates)\r\n    const markerRect = marker.getBoundingClientRect();\r\n    // Return the coordinates of the marker\r\n    return {\r\n        top: markerRect.top,\r\n        left: markerRect.left\r\n    };\r\n}\r\n/**\r\n * Gets caret coordinates for a contentEditable element.\r\n * Inserts a temporary marker element at the caret position and measures its coordinates.\r\n * @param {HTMLElement} el - The contentEditable element.\r\n * @returns {Coordinates} The top and left coordinates of the caret.\r\n */\r\nfunction getCaretCoordinatesEditable(el) {\r\n    var _a;\r\n    let coordinates = { top: 0, left: 0 };\r\n    const selection = window.getSelection();\r\n    if (selection && selection.rangeCount > 0) {\r\n        const range = selection.getRangeAt(0).cloneRange();\r\n        range.collapse(true);\r\n        const marker = document.createElement('span');\r\n        marker.textContent = \"\\u200b\";\r\n        range.insertNode(marker);\r\n        const rect = marker.getBoundingClientRect();\r\n        coordinates = {\r\n            top: rect.top,\r\n            left: rect.left\r\n        };\r\n        // Clean up marker\r\n        (_a = marker.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(marker);\r\n        selection.removeAllRanges();\r\n        selection.addRange(range);\r\n    }\r\n    else {\r\n        const rect = el.getBoundingClientRect();\r\n        coordinates = {\r\n            top: rect.top,\r\n            left: rect.left\r\n        };\r\n    }\r\n    return coordinates;\r\n}\r\n/**\r\n * Unified function to get caret coordinates for both contentEditable and textarea/input elements.\r\n * @param {HTMLElement} el - The target element.\r\n * @returns {Coordinates} The caret coordinates.\r\n */\r\nexport function getCaretCoordinates(el) {\r\n    if (el instanceof HTMLTextAreaElement || el instanceof HTMLInputElement) {\r\n        return getCaretCoordinatesTextarea(el);\r\n    }\r\n    else {\r\n        return getCaretCoordinatesEditable(el);\r\n    }\r\n}\r\n/**\r\n * Returns the numeric value of a CSS property (e.g., lineHeight, fontSize) for a given element.\r\n * @param {HTMLElement} el - The target element.\r\n * @param {string} property - The CSS property (e.g., 'font-size', 'line-height').\r\n * @returns {number} The numeric value.\r\n */\r\nexport function getCSSNumericValue(el, property) {\r\n    const value = window.getComputedStyle(el).getPropertyValue(property);\r\n    return parseFloat(value) || 0;\r\n}\r\n/**\r\n * Returns the line height of an element. If line-height is 'normal', falls back to fontSize.\r\n * @param {HTMLElement} el - The target element.\r\n * @returns {number} The computed line height.\r\n */\r\nexport function getLineHeight(el) {\r\n    const computed = window.getComputedStyle(el).getPropertyValue('line-height');\r\n    if (computed === 'normal') {\r\n        return getCSSNumericValue(el, 'font-size');\r\n    }\r\n    return getCSSNumericValue(el, 'line-height');\r\n}\r\n/**\r\n * Computes a normalized match score between 0 and 1.\r\n * 1 means an exact match (ignoring case), 0 means no match.\r\n * Otherwise, the score decreases as the query appears later in the suggestion key.\r\n * @param {string} suggestionKey - The suggestion key.\r\n * @param {string} query - The query text.\r\n * @returns {number} The normalized match score.\r\n */\r\nexport function getMatchScore(suggestionKey, query) {\r\n    const key = suggestionKey.toLowerCase();\r\n    const q = query.toLowerCase();\r\n    if (!q)\r\n        return 0;\r\n    if (key === q)\r\n        return 1;\r\n    const index = key.indexOf(q);\r\n    if (index === -1)\r\n        return 0;\r\n    const score = 1 - index / key.length;\r\n    return Math.max(0, Math.min(1, score));\r\n}\r\n/**\r\n * Sorts and filters an array of suggestion objects based on match score.\r\n * Only returns suggestions whose match score is greater than or equal to minScore.\r\n * @param {SuggestionItem[]} suggestions - The array of suggestion objects.\r\n * @param {string} query - The query text (after the trigger).\r\n * @param {number} minScore - The minimum match score required.\r\n * @returns {SuggestionItem[]} The sorted (best match first) and filtered array.\r\n */\r\nexport function sortAndFilterSuggestions(suggestions, query, minScore) {\r\n    if (!query)\r\n        return suggestions;\r\n    suggestions.forEach(suggestion => {\r\n        suggestion.matchScore = getMatchScore(suggestion.key, query);\r\n    });\r\n    const filtered = suggestions.filter(suggestion => suggestion.matchScore >= minScore);\r\n    filtered.sort((a, b) => b.matchScore - a.matchScore);\r\n    return filtered;\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\r\n * TagIt.js - A JavaScript library for managing tag suggestions\r\n * in contentEditable and input/textarea elements.\r\n *\r\n * Features:\r\n *  - Configurable trigger character.\r\n *  - Middleware for transforming/filtering suggestions.\r\n *  - Asynchronous suggestion fetching with debouncing.\r\n *  - Real-time suggestion management (add/remove).\r\n *  - Scoring-based suggestion sorting and filtering.\r\n *\r\n * @author\r\n * Deepansu Mor\r\n * @github https://github.com/deepansumor\r\n */\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { getCaretCoordinates, getLineHeight, sortAndFilterSuggestions } from './utils';\r\nexport default class TagIt {\r\n    /**\r\n     * Constructor for initializing the TagIt class.\r\n     * @param {HTMLElement} target - The HTML element (contentEditable or input/textarea) to attach TagIt to.\r\n     * @param {TagItOptions} [options] - Configuration options for TagIt.\r\n     */\r\n    constructor(target, options) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        this.triggerChar = '@';\r\n        this.savedRange = null;\r\n        this.middlewares = [];\r\n        this.fetchTimeout = null;\r\n        this.target = target;\r\n        this.suggestions = (options === null || options === void 0 ? void 0 : options.suggestions) || [];\r\n        this.keepTrigger = (_a = options === null || options === void 0 ? void 0 : options.keepTrigger) !== null && _a !== void 0 ? _a : false;\r\n        this.triggerChar = (_b = options === null || options === void 0 ? void 0 : options.triggerChar) !== null && _b !== void 0 ? _b : this.triggerChar;\r\n        this.maxSuggestions = (_c = options === null || options === void 0 ? void 0 : options.maxSuggestions) !== null && _c !== void 0 ? _c : 5;\r\n        this.minScore = (_d = options === null || options === void 0 ? void 0 : options.minScore) !== null && _d !== void 0 ? _d : 0;\r\n        this.debounceTime = (_e = options === null || options === void 0 ? void 0 : options.debounceTime) !== null && _e !== void 0 ? _e : 300;\r\n        this.enableLog = (_f = options === null || options === void 0 ? void 0 : options.enableLog) !== null && _f !== void 0 ? _f : false;\r\n        this.fetchSuggestions = options === null || options === void 0 ? void 0 : options.fetchSuggestions;\r\n        this.dropdown = this.createDropdown();\r\n        this.attachEvents();\r\n    }\r\n    /**\r\n     * Logs a message if logging is enabled.\r\n     * @param {...any} msg - The message(s) to log.\r\n     */\r\n    log(...msg) {\r\n        this.enableLog && console.log(...msg);\r\n    }\r\n    /**\r\n     * Logs an error message.\r\n     * @param {...any} msg - The error message(s) to log.\r\n     */\r\n    error(...msg) {\r\n        console.error(...msg);\r\n    }\r\n    /**\r\n     * Register a middleware function to transform/filter suggestions.\r\n     * @param {SuggestionMiddleware} middleware - The middleware function.\r\n     */\r\n    use(middleware) {\r\n        this.middlewares.push(middleware);\r\n    }\r\n    /**\r\n     * Adds a new suggestion to the instance in real-time.\r\n     * @param {SuggestionItem} suggestion - The suggestion object to add.\r\n     */\r\n    addSuggestion(suggestion) {\r\n        this.suggestions.push(suggestion);\r\n    }\r\n    /**\r\n     * Removes a suggestion by its key.\r\n     * @param {string} key - The key of the suggestion to remove.\r\n     */\r\n    removeSuggestion(key) {\r\n        this.suggestions = this.suggestions.filter(item => item.key !== key);\r\n    }\r\n    /**\r\n     * Creates and returns the dropdown element.\r\n     * @returns {HTMLUListElement} The dropdown element.\r\n     */\r\n    createDropdown() {\r\n        const dropdown = document.createElement('ul');\r\n        Object.assign(dropdown.style, {\r\n            position: 'fixed',\r\n            display: 'none',\r\n            listStyle: 'none',\r\n            padding: '5px',\r\n            margin: '0',\r\n            border: '1px solid #ccc',\r\n            background: '#fff'\r\n        });\r\n        document.body.appendChild(dropdown);\r\n        return dropdown;\r\n    }\r\n    /**\r\n     * Attaches keyup and click events to the target and document.\r\n     */\r\n    attachEvents() {\r\n        this.target.addEventListener('keyup', this.onKeyUp.bind(this));\r\n        document.addEventListener('click', this.onOutsideClick.bind(this));\r\n    }\r\n    /**\r\n     * Handler for clicks outside the dropdown.\r\n     * Hides the dropdown if clicked outside.\r\n     * @param {MouseEvent} e - The click event.\r\n     */\r\n    onOutsideClick(e) {\r\n        if (!this.dropdown.contains(e.target)) {\r\n            this.hideDropdown();\r\n        }\r\n    }\r\n    /**\r\n     * Handler for keyup events on the target element.\r\n     * Debounces async fetching of suggestions and displays the dropdown.\r\n     */\r\n    onKeyUp(e) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const selection = window.getSelection();\r\n                if (selection && selection.rangeCount > 0) {\r\n                    this.savedRange = selection.getRangeAt(0).cloneRange();\r\n                }\r\n                if (this.isTriggerActive()) {\r\n                    const position = getCaretCoordinates(this.target);\r\n                    if (this.fetchSuggestions) {\r\n                        if (this.fetchTimeout) {\r\n                            clearTimeout(this.fetchTimeout);\r\n                        }\r\n                        this.fetchTimeout = window.setTimeout(() => __awaiter(this, void 0, void 0, function* () {\r\n                            try {\r\n                                const asyncSuggestions = yield this.fetchSuggestions();\r\n                                this.suggestions = asyncSuggestions;\r\n                                this.showDropdown(position);\r\n                            }\r\n                            catch (error) {\r\n                                this.error('Error fetching suggestions:', error);\r\n                            }\r\n                        }), this.debounceTime);\r\n                    }\r\n                    else {\r\n                        this.showDropdown(position);\r\n                    }\r\n                }\r\n                else {\r\n                    if (this.fetchTimeout) {\r\n                        clearTimeout(this.fetchTimeout);\r\n                        this.fetchTimeout = null;\r\n                    }\r\n                    this.hideDropdown();\r\n                }\r\n            }\r\n            catch (err) {\r\n                this.error(\"Error in onKeyUp:\", err);\r\n            }\r\n        });\r\n    }\r\n    // --- Helpers for Input/TextArea vs. ContentEditable ---\r\n    isInputTarget() {\r\n        return this.target instanceof HTMLTextAreaElement || this.target instanceof HTMLInputElement;\r\n    }\r\n    getTextBeforeCaretForInput() {\r\n        const textarea = this.target;\r\n        return textarea.value.substring(0, textarea.selectionStart);\r\n    }\r\n    getTextBeforeCaretForEditable() {\r\n        var _a;\r\n        const selection = window.getSelection();\r\n        if (selection && selection.rangeCount > 0) {\r\n            const range = selection.getRangeAt(0);\r\n            const node = range.startContainer;\r\n            if (node.nodeType === Node.TEXT_NODE) {\r\n                return ((_a = node.textContent) === null || _a === void 0 ? void 0 : _a.substring(0, range.startOffset)) || '';\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    /**\r\n     * Checks if the trigger is active (i.e. the last word before caret starts with the trigger character).\r\n     * @returns {boolean} True if active, false otherwise.\r\n     */\r\n    isTriggerActive() {\r\n        let textBeforeCaret = this.isInputTarget()\r\n            ? this.getTextBeforeCaretForInput()\r\n            : this.getTextBeforeCaretForEditable();\r\n        textBeforeCaret = textBeforeCaret.replace(/\\u00A0/g, \" \");\r\n        const parts = textBeforeCaret.split(\" \");\r\n        const lastPart = parts[parts.length - 1];\r\n        if (!lastPart.startsWith(this.triggerChar)) {\r\n            this.log(\"Trigger character not found before caret:\", lastPart);\r\n        }\r\n        return lastPart.startsWith(this.triggerChar) && this.getTriggerQuery().indexOf(\" \") === -1;\r\n    }\r\n    getQueryForInput() {\r\n        const textarea = this.target;\r\n        const start = textarea.selectionStart;\r\n        const value = textarea.value;\r\n        const triggerIndex = value.lastIndexOf(this.triggerChar, start);\r\n        if (triggerIndex === -1) {\r\n            this.log(\"Trigger character not found in input value\");\r\n            return '';\r\n        }\r\n        return value.substring(triggerIndex + 1, start);\r\n    }\r\n    getQueryForEditable() {\r\n        const selection = window.getSelection();\r\n        if (selection && selection.rangeCount > 0) {\r\n            const range = selection.getRangeAt(0);\r\n            const node = range.startContainer;\r\n            if (node.nodeType === Node.TEXT_NODE) {\r\n                const textContent = node.textContent || '';\r\n                const triggerIndex = textContent.lastIndexOf(this.triggerChar, range.startOffset);\r\n                if (triggerIndex === -1) {\r\n                    this.log(\"Trigger character not found in editable content\");\r\n                    return '';\r\n                }\r\n                return textContent.substring(triggerIndex + 1, range.startOffset);\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n    getTriggerQuery() {\r\n        return this.isInputTarget() ? this.getQueryForInput() : this.getQueryForEditable();\r\n    }\r\n    // --- Dropdown Rendering and Scoring ---\r\n    /**\r\n     * Renders the suggestion dropdown based on current suggestions and query.\r\n     * @param {Coordinates} position - The coordinates to position the dropdown.\r\n     */\r\n    showDropdown(position) {\r\n        let suggestionsToShow = [...this.suggestions];\r\n        for (const middleware of this.middlewares) {\r\n            try {\r\n                suggestionsToShow = middleware(suggestionsToShow);\r\n            }\r\n            catch (err) {\r\n                this.error(\"Error in middleware:\", err);\r\n            }\r\n        }\r\n        const query = this.getTriggerQuery().toLowerCase();\r\n        suggestionsToShow = sortAndFilterSuggestions(suggestionsToShow, query, this.minScore);\r\n        suggestionsToShow = suggestionsToShow.slice(0, this.maxSuggestions);\r\n        if (suggestionsToShow.length === 0) {\r\n            this.log(\"No suggestions available for query:\", query);\r\n            return this.hideDropdown();\r\n        }\r\n        this.dropdown.innerHTML = '';\r\n        const lineHeight = getLineHeight(this.target);\r\n        suggestionsToShow.forEach(item => {\r\n            const li = document.createElement('li');\r\n            li.textContent = item.display;\r\n            Object.assign(li.style, {\r\n                padding: '3px 6px',\r\n                cursor: 'pointer'\r\n            });\r\n            li.addEventListener('mousedown', (e) => e.preventDefault());\r\n            li.addEventListener('click', () => {\r\n                try {\r\n                    this.insertTag(item.display);\r\n                }\r\n                catch (err) {\r\n                    this.error(\"Error inserting tag:\", err);\r\n                }\r\n                this.hideDropdown();\r\n            });\r\n            this.dropdown.appendChild(li);\r\n        });\r\n        Object.assign(this.dropdown.style, {\r\n            top: `${position.top + lineHeight}px`,\r\n            left: `${position.left + 5}px`,\r\n            display: 'block'\r\n        });\r\n    }\r\n    /**\r\n     * Hides the suggestion dropdown.\r\n     */\r\n    hideDropdown() {\r\n        this.dropdown.style.display = 'none';\r\n    }\r\n    /**\r\n     * Inserts the selected tag into the target element.\r\n     * @param {string} tag - The tag text to insert.\r\n     */\r\n    insertTag(tag) {\r\n        try {\r\n            if (this.isInputTarget()) {\r\n                this.insertTagForTextarea(tag);\r\n            }\r\n            else {\r\n                this.insertTagForContentEditable(tag);\r\n            }\r\n        }\r\n        catch (err) {\r\n            this.error(\"Error in insertTag:\", err);\r\n        }\r\n    }\r\n    /**\r\n     * Inserts the tag into a textarea or input element.\r\n     * @param {string} tag - The tag text to insert.\r\n     */\r\n    insertTagForTextarea(tag) {\r\n        const textarea = this.target;\r\n        const start = textarea.selectionStart;\r\n        const end = textarea.selectionEnd;\r\n        const value = textarea.value;\r\n        const triggerIndex = value.lastIndexOf(this.triggerChar, start);\r\n        if (triggerIndex === -1) {\r\n            this.log(\"Trigger character not found when inserting tag in textarea\");\r\n            return;\r\n        }\r\n        const beforeTrigger = value.substring(0, triggerIndex);\r\n        const afterCaret = value.substring(end);\r\n        const triggerPart = this.keepTrigger ? this.triggerChar : '';\r\n        const newValue = `${beforeTrigger}${triggerPart}${tag} ${afterCaret}`;\r\n        textarea.value = newValue;\r\n        const newPos = beforeTrigger.length + triggerPart.length + tag.length + 1;\r\n        textarea.setSelectionRange(newPos, newPos);\r\n    }\r\n    /**\r\n     * Inserts the tag into a contentEditable element.\r\n     * @param {string} tag - The tag text to insert.\r\n     */\r\n    insertTagForContentEditable(tag) {\r\n        const selection = window.getSelection();\r\n        if (this.savedRange && selection) {\r\n            selection.removeAllRanges();\r\n            selection.addRange(this.savedRange);\r\n        }\r\n        if (selection && selection.rangeCount > 0) {\r\n            const range = selection.getRangeAt(0);\r\n            const node = range.startContainer;\r\n            if (node.nodeType !== Node.TEXT_NODE) {\r\n                this.log(\"Current node is not a text node; cannot insert tag\");\r\n                return;\r\n            }\r\n            const textContent = node.textContent || '';\r\n            const triggerIndex = textContent.lastIndexOf(this.triggerChar, range.startOffset);\r\n            if (triggerIndex === -1) {\r\n                this.log(\"Trigger character not found in contentEditable text\");\r\n                return;\r\n            }\r\n            const before = textContent.substring(0, triggerIndex);\r\n            const after = textContent.substring(range.startOffset);\r\n            const triggerPart = this.keepTrigger ? this.triggerChar : '';\r\n            const insertText = triggerPart + tag + ' ';\r\n            const beforeNode = document.createTextNode(before);\r\n            const tagNode = document.createTextNode(insertText);\r\n            const afterNode = document.createTextNode(after);\r\n            const parent = node.parentNode;\r\n            if (!parent) {\r\n                this.error(\"Parent node not found; cannot insert tag\");\r\n                return;\r\n            }\r\n            parent.insertBefore(beforeNode, node);\r\n            parent.insertBefore(tagNode, node);\r\n            parent.insertBefore(afterNode, node);\r\n            parent.removeChild(node);\r\n            const newRange = document.createRange();\r\n            newRange.setStartAfter(tagNode);\r\n            newRange.collapse(true);\r\n            selection.removeAllRanges();\r\n            selection.addRange(newRange);\r\n        }\r\n    }\r\n    /**\r\n     * Destroys the TagIt instance by removing event listeners and the dropdown element.\r\n     */\r\n    destroy() {\r\n        this.target.removeEventListener('keyup', this.onKeyUp.bind(this));\r\n        document.removeEventListener('click', this.onOutsideClick.bind(this));\r\n        document.body.removeChild(this.dropdown);\r\n    }\r\n}\r\n"],"names":[],"sourceRoot":""}